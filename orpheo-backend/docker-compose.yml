version: '3.8'

# ============================================
# ORPHEO - SISTEMA DE GESTI√ìN MAS√ìNICA
# Docker Compose para desarrollo y producci√≥n
# ============================================

services:
  # ==========================================
  # BASE DE DATOS POSTGRESQL
  # ==========================================
  postgres:
    image: postgres:15-alpine
    container_name: orpheo_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: orpheo_db
      POSTGRES_USER: orpheo_user
      POSTGRES_PASSWORD: orpheo_password_123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
      # Configuraci√≥n de performance
      POSTGRES_SHARED_PRELOAD_LIBRARIES: pg_stat_statements
      POSTGRES_MAX_CONNECTIONS: 200
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./orpheo-backend/src/scripts/database_init.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./scripts/postgres-init.sh:/docker-entrypoint-initdb.d/02-setup.sh
    ports:
      - "5432:5432"
    networks:
      - orpheo_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U orpheo_user -d orpheo_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100

  # ==========================================
  # REDIS PARA CACHE Y SESIONES
  # ==========================================
  redis:
    image: redis:7-alpine
    container_name: orpheo_redis
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --requirepass orpheo_redis_password
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    networks:
      - orpheo_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    sysctls:
      - net.core.somaxconn=1024

  # ==========================================
  # BACKEND API NODE.JS
  # ==========================================
  backend:
    build:
      context: ./orpheo-backend
      dockerfile: Dockerfile
      args:
        NODE_ENV: ${NODE_ENV:-production}
    container_name: orpheo_backend
    restart: unless-stopped
    environment:
      # Configuraci√≥n b√°sica
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3001
      HOST: 0.0.0.0
      
      # Base de datos
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: orpheo_db
      DB_USER: orpheo_user
      DB_PASSWORD: orpheo_password_123
      DB_SSL: false
      
      # JWT y seguridad
      JWT_SECRET: ${JWT_SECRET:-orpheo_jwt_secret_super_seguro_cambiar_en_produccion}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-15m}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-orpheo_jwt_refresh_secret_super_seguro}
      JWT_REFRESH_EXPIRES_IN: ${JWT_REFRESH_EXPIRES_IN:-7d}
      
      # CORS y or√≠genes permitidos
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-http://localhost:3000,http://localhost:19006,exp://192.168.1.100:19000}
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: orpheo_redis_password
      
      # Configuraci√≥n de archivos
      MAX_FILE_SIZE: ${MAX_FILE_SIZE:-10485760}
      UPLOAD_PATH: uploads
      ALLOWED_FILE_TYPES: pdf,doc,docx,xls,xlsx,ppt,pptx,jpg,jpeg,png,txt
      
      # Rate limiting
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
      LOGIN_RATE_LIMIT_WINDOW_MS: 900000
      LOGIN_RATE_LIMIT_MAX_ATTEMPTS: 5
      
      # Email configuraci√≥n
      EMAIL_HOST: ${EMAIL_HOST:-smtp.gmail.com}
      EMAIL_PORT: ${EMAIL_PORT:-587}
      EMAIL_SECURE: ${EMAIL_SECURE:-false}
      EMAIL_USER: ${EMAIL_USER:-}
      EMAIL_PASSWORD: ${EMAIL_PASSWORD:-}
      EMAIL_FROM: ${EMAIL_FROM:-"Sistema Orpheo <noreply@orpheo.com>"}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_FILE: logs/app.log
      LOG_MAX_SIZE: 20m
      LOG_MAX_FILES: 14d
      
      # WebSocket
      WEBSOCKET_ENABLED: true
      WEBSOCKET_ORIGINS: ${WEBSOCKET_ORIGINS:-http://localhost:3000,http://localhost:19006}
      
      # Configuraci√≥n mas√≥nica
      LOGIA_NOMBRE: ${LOGIA_NOMBRE:-"Logia Orpheo"}
      LOGIA_NUMERO: ${LOGIA_NUMERO:-001}
      LOGIA_ORIENTE: ${LOGIA_ORIENTE:-"Oriente de Chile"}
      LOGIA_VALLE: ${LOGIA_VALLE:-"Valle de Santiago"}
      
      # Configuraci√≥n de seguridad
      BCRYPT_ROUNDS: 12
      SESSION_SECRET: ${SESSION_SECRET:-orpheo_session_secret_cambiar}
      MAX_LOGIN_ATTEMPTS: 5
      ACCOUNT_LOCK_TIME: 1800000
      
      # Backup
      BACKUP_ENABLED: true
      BACKUP_SCHEDULE: "0 2 * * *"
      BACKUP_RETENTION_DAYS: 30
    
    volumes:
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
      - ./orpheo-backend/.env:/app/.env:ro
    
    ports:
      - "3001:3001"
    
    networks:
      - orpheo_network
    
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Comando de inicio con migraciones autom√°ticas
    command: >
      sh -c "
        echo 'üöÄ Iniciando Orpheo Backend...' &&
        echo '‚è≥ Esperando base de datos...' &&
        npm run migrate &&
        echo '‚úÖ Migraciones completadas' &&
        npm run seed &&
        echo '‚úÖ Datos iniciales insertados' &&
        echo 'üåü Iniciando servidor en puerto 3001...' &&
        npm start
      "

  # ==========================================
  # FRONTEND REACT NATIVE/EXPO
  # ==========================================
  frontend:
    build:
      context: ./orpheo-frontend
      dockerfile: Dockerfile
      args:
        EXPO_PUBLIC_API_URL: ${EXPO_PUBLIC_API_URL:-http://localhost:3001/api}
        EXPO_PUBLIC_WEBSOCKET_URL: ${EXPO_PUBLIC_WEBSOCKET_URL:-ws://localhost:3001}
    container_name: orpheo_frontend
    restart: unless-stopped
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - EXPO_DEVTOOLS_LISTEN_ADDRESS=0.0.0.0
      - EXPO_PUBLIC_API_URL=${EXPO_PUBLIC_API_URL:-http://localhost:3001/api}
      - EXPO_PUBLIC_WEBSOCKET_URL=${EXPO_PUBLIC_WEBSOCKET_URL:-ws://localhost:3001}
      - CHOKIDAR_USEPOLLING=true
    volumes:
      - ./orpheo-frontend:/app
      - frontend_node_modules:/app/node_modules
    ports:
      - "19000:19000"  # Expo DevTools
      - "19001:19001"  # Expo
      - "19002:19002"  # Expo
      - "19006:19006"  # Metro bundler
    networks:
      - orpheo_network
    depends_on:
      backend:
        condition: service_healthy
    profiles:
      - development
    command: ["npx", "expo", "start", "--dev-client", "--host", "0.0.0.0"]

  # ==========================================
  # NGINX PROXY REVERSO
  # ==========================================
  nginx:
    image: nginx:alpine
    container_name: orpheo_nginx
    restart: unless-stopped
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx-default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
      - backend_uploads:/var/www/uploads:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - orpheo_network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - production

  # ==========================================
  # PGADMIN PARA ADMINISTRACI√ìN DE BD
  # ==========================================
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: orpheo_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@orpheo.com
      PGADMIN_DEFAULT_PASSWORD: admin123456
      PGADMIN_LISTEN_PORT: 80
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
      PGADMIN_DISABLE_POSTFIX: 'True'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./config/pgadmin-servers.json:/pgadmin4/servers.json:ro
    ports:
      - "5050:80"
    networks:
      - orpheo_network
    depends_on:
      - postgres
    profiles:
      - development
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==========================================
  # SERVICIO DE BACKUP AUTOM√ÅTICO
  # ==========================================
  backup:
    image: postgres:15-alpine
    container_name: orpheo_backup
    restart: "no"
    environment:
      PGPASSWORD: orpheo_password_123
      BACKUP_SCHEDULE: "0 2 * * *"
      BACKUP_RETENTION_DAYS: 30
    volumes:
      - backup_data:/backup
      - ./scripts/backup.sh:/backup.sh:ro
      - backend_uploads:/uploads:ro
    networks:
      - orpheo_network
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      sh -c "
        chmod +x /backup.sh &&
        echo 'üì¶ Servicio de backup inicializado' &&
        echo '‚è∞ Horario: Diario a las 2:00 AM' &&
        echo 'üìÖ Retenci√≥n: 30 d√≠as' &&
        /backup.sh &&
        echo '‚úÖ Backup inicial completado'
      "
    profiles:
      - backup

  # ==========================================
  # SERVICIO DE MONITOREO
  # ==========================================
  monitoring:
    image: prom/prometheus:latest
    container_name: orpheo_monitoring
    restart: unless-stopped
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - orpheo_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    profiles:
      - monitoring

  # ==========================================
  # GRAFANA PARA DASHBOARDS
  # ==========================================
  grafana:
    image: grafana/grafana:latest
    container_name: orpheo_grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin123456
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana-dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana-datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    networks:
      - orpheo_network
    depends_on:
      - monitoring
    profiles:
      - monitoring

# ==========================================
# VOL√öMENES PERSISTENTES
# ==========================================
volumes:
  # Base de datos
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres

  # Cache Redis
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis

  # Backend uploads y logs
  backend_uploads:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/uploads

  backend_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/logs

  # Frontend node_modules
  frontend_node_modules:
    driver: local

  # Administraci√≥n
  pgadmin_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/pgadmin

  # Nginx logs
  nginx_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/nginx-logs

  # Backups
  backup_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/backup

  # Monitoreo
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/prometheus

  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/grafana

# ==========================================
# REDES
# ==========================================
networks:
  orpheo_network:
    driver: bridge
    name: orpheo_network
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
    driver_opts:
      com.docker.network.bridge.name: orpheo0